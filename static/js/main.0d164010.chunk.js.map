{"version":3,"sources":["App.js","index.js"],"names":["DAYS_OF_WEEK","EVENT_COLORS","Мафия","Квиз","Нетворкинг","Настолки","DEFAULT_COLOR","CSV_URL","EventCard","_ref","_event$Отменено","event","isCancelled","toLowerCase","reason","React","createElement","Card","sx","mb","backgroundColor","eventTypeColor","boxShadow","&:hover","bgcolor","color","CardContent","Typography","gutterBottom","variant","component","fontWeight","textTransform","Тип","concat","dayOfWeek","displayTime","mt","Описание","Link","href","target","App","Component","constructor","super","arguments","this","state","data","componentDidMount","readRemoteFile","complete","results","jsonData","convertArrayToJSON","sortedFilteredData","sortAndFilterEvents","setState","array","headers","rows","map","row","reduce","obj","header","index","events","currentDate","Date","setHours","filteredEvents","date","parseEventDate","push","dateObject","getDay","formatDisplayTime","getEventTypeColor","sort","a","b","dateString","timeString","dateParts","split","reverse","timeParts","join","slice","eventType","Object","keys","find","key","startsWith","render","Container","maxWidth","textAlign","marginBottom","fontSize","xs","sm","Grid","container","spacing","justifyContent","item","md","lg","theme","createTheme","ReactDOM","createRoot","document","getElementById","ThemeProvider"],"mappings":"8QAKA,MAAMA,EAAe,CAAC,qEAAe,qEAAe,6CAAW,iCAAS,6CAAW,6CAAW,8CACxFC,EAAe,CACnBC,iCAAS,UACTC,2BAAQ,UACRC,+DAAc,UACdC,mDAAY,WAERC,EAAgB,YAChBC,EAAU,mKAqFhB,MAAMC,EAAYC,IAAe,IAAAC,EAAA,IAAdC,MAAEA,GAAOF,EAC1B,MAAMG,EAAoD,kBAApB,QAAlBF,EAAAC,EAAM,4DAAY,IAAAD,OAAA,EAAlBA,EAAoBG,eAClCC,EAASH,EAAM,oFAAqB,2FAE1C,OACEI,IAAAC,cAACC,IAAI,CAACC,GAAI,CACRC,GAAI,EACJC,gBAAiBT,EAAMU,eACvBC,UAAW,EACXC,UAAW,CACTD,UAAW,MAETV,GAAe,CACjBY,QAAS,cACTC,MAAO,wBAGTV,IAAAC,cAACU,IAAW,KACVX,IAAAC,cAACW,IAAU,CAACC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAMZ,GAAI,CAAEa,WAAY,OAAQC,cAAe,eAC5FrB,EAAMsB,oBAAO,qDAEhBlB,IAAAC,cAACW,IAAU,CAACE,QAAQ,QAAQJ,MAAM,kBAAgB,GAAAS,OAC5CvB,EAAM,4BAAO,MAAAuB,OAAKvB,EAAMwB,UAAS,MAAAD,OAAKvB,EAAMyB,cAElDrB,IAAAC,cAACW,IAAU,CAACE,QAAQ,QAAQX,GAAI,CAAEmB,GAAI,IACnC1B,EAAM2B,kDAAY,uEAErBvB,IAAAC,cAACW,IAAU,CAACE,QAAQ,QAAQX,GAAI,CAAEmB,GAAI,IAAK,mCACjC1B,EAAM,oFAAqBI,IAAAC,cAACuB,IAAI,CAACC,KAAM7B,EAAM,oFAAoB8B,OAAO,UAAU9B,EAAM,mHAAkC,qDAEnIC,GACCG,IAAAC,cAACW,IAAU,CAACF,MAAM,QAAQP,GAAI,CAAEmB,GAAI,IAAK,qDAC5BvB,MAQR4B,MA3Hf,cAAkBC,YAAUC,cAAAC,SAAAC,WAAAC,KAC1BC,MAAQ,CACNC,KAAM,IAGRC,oBACEC,YAAe5C,EAAS,CACtB6C,SAAWC,IACT,MAAMC,EAAWP,KAAKQ,mBAAmBF,EAAQJ,MAC3CO,EAAqBT,KAAKU,oBAAoBH,GACpDP,KAAKW,SAAS,CAAET,KAAMO,OAK5BD,mBAAmBI,GACjB,MAAOC,KAAYC,GAAQF,EAC3B,OAAOE,EAAKC,IAAIC,GAAOH,EAAQI,OAAO,CAACC,EAAKC,EAAQC,KAClDF,EAAIC,GAAUH,EAAII,IAAU,GACrBF,GACN,KAGLR,oBAAoBW,GAClB,MAAMC,GAAc,IAAIC,MAAOC,SAAS,EAAG,EAAG,EAAG,GAEjD,OAAOH,EAAOJ,OAAO,CAACQ,EAAgB7D,KACpC,MAAM8D,EAAO1B,KAAK2B,eAAe/D,EAAM,4BAASA,EAAM,mCACtD,OAAK8D,GAAQA,EAAOJ,EAAoBG,GAExCA,EAAeG,KAAK,IACfhE,EACHiE,WAAYH,EACZtC,UAAWnC,EAAayE,EAAKI,UAC7BzC,YAAaW,KAAK+B,kBAAkBnE,EAAM,mCAC1CU,eAAgB0B,KAAKgC,kBAAkBpE,EAAM,yBAGxC6D,IACN,IAAIQ,KAAK,CAACC,EAAGC,IAAMD,EAAEL,WAAaM,EAAEN,YAGzCF,eAAeS,EAAYC,GACzB,IAAKD,EAAY,OAAO,KAExB,MAAME,EAAYF,EAAWG,MAAM,KAAKC,UAClCC,EAAYJ,EAAaA,EAAWE,MAAM,KAAO,CAAC,KAAM,MAC9D,OAAO,IAAIhB,KAAI,GAAApC,OAAImD,EAAUI,KAAK,KAAI,KAAAvD,OAAIsD,EAAUtD,OAAO,MAAMuD,KAAK,OAGxEX,kBAAkBM,GAChB,OAAOA,EAAaA,EAAWE,MAAM,KAAKI,MAAM,EAAG,GAAGD,KAAK,KAAO,QAGpEV,kBAAkBY,GAChB,OAAOA,GAAY1F,EAAa2F,OAAOC,KAAK5F,GAAc6F,KAAKC,GAAOJ,EAAU9E,cAAcmF,WAAWD,EAAIlF,kBAAoCP,EAGnJ2F,SACE,OACElF,IAAAC,cAACkF,IAAS,CAACC,SAAS,MAClBpF,IAAAC,cAACW,IAAU,CAACE,QAAQ,KAAKC,UAAU,KAAKF,cAAY,EAClDV,GAAI,CACFa,WAAY,OACZqE,UAAW,SACXC,aAAc,OACdC,SAAU,CAAEC,GAAI,SAAUC,GAAI,cAEjC,oBAGDzF,IAAAC,cAACyF,IAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,eAAe,UACxC7D,KAAKC,MAAMC,KAAKa,IAAI,CAACnD,EAAOwD,IAC3BpD,IAAAC,cAACyF,IAAI,CAACI,MAAI,EAACN,GAAI,GAAIC,GAAI,EAAGM,GAAI,EAAGC,GAAI,EAAGhB,IAAK5B,GAC3CpD,IAAAC,cAACR,EAAS,CAACG,MAAOA,UCpFhC,MAAMqG,EAAQC,YAAY,IAIbC,IAASC,WAAWC,SAASC,eAAe,SACpDpB,OACHlF,IAAAC,cAACsG,IAAa,CAACN,MAAOA,GACpBjG,IAAAC,cAAC0B,EAAG","file":"static/js/main.0d164010.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { readRemoteFile } from 'react-papaparse';\nimport { Card, CardContent, Typography, Link, Grid, Container } from '@mui/material';\n\nconst DAYS_OF_WEEK = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\nconst EVENT_COLORS = {\n  'Мафия': '#FADADD', // light pink\n  'Квиз': '#ADD8E6', // light blue\n  'Нетворкинг': '#90EE90', // light green\n  'Настолки': '#FAFAD2', // light goldenrod yellow\n};\nconst DEFAULT_COLOR = 'lightgrey'; // default color\nconst CSV_URL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vTPva1TqjJb1q71rdIyiL8kCTg1ErWP8OWYJQqDLWZhNPP43EechxS7r7mOzKL43En-FHBx0Ql0J0Lp/pub?gid=0&single=true&output=csv';\n\nclass App extends Component {\n  state = {\n    data: [],\n  };\n\n  componentDidMount() {\n    readRemoteFile(CSV_URL, {\n      complete: (results) => {\n        const jsonData = this.convertArrayToJSON(results.data);\n        const sortedFilteredData = this.sortAndFilterEvents(jsonData);\n        this.setState({ data: sortedFilteredData });\n      },\n    });\n  }\n\n  convertArrayToJSON(array) {\n    const [headers, ...rows] = array;\n    return rows.map(row => headers.reduce((obj, header, index) => {\n      obj[header] = row[index] || '';\n      return obj;\n    }, {}));\n  }\n\n  sortAndFilterEvents(events) {\n    const currentDate = new Date().setHours(0, 0, 0, 0);\n\n    return events.reduce((filteredEvents, event) => {\n      const date = this.parseEventDate(event['Дата'], event['Время']);\n      if (!date || date < currentDate) return filteredEvents;\n\n      filteredEvents.push({\n        ...event,\n        dateObject: date,\n        dayOfWeek: DAYS_OF_WEEK[date.getDay()],\n        displayTime: this.formatDisplayTime(event['Время']),\n        eventTypeColor: this.getEventTypeColor(event['Тип']),\n      });\n\n      return filteredEvents;\n    }, []).sort((a, b) => a.dateObject - b.dateObject);\n  }\n\n  parseEventDate(dateString, timeString) {\n    if (!dateString) return null;\n\n    const dateParts = dateString.split('/').reverse();\n    const timeParts = timeString ? timeString.split(':') : ['00', '00'];\n    return new Date(`${dateParts.join('-')}T${timeParts.concat('00').join(':')}`);\n  }\n\n  formatDisplayTime(timeString) {\n    return timeString ? timeString.split(':').slice(0, 2).join(':') : '00:00';\n  }\n\n  getEventTypeColor(eventType) {\n    return eventType ? EVENT_COLORS[Object.keys(EVENT_COLORS).find(key => eventType.toLowerCase().startsWith(key.toLowerCase()))] || DEFAULT_COLOR : DEFAULT_COLOR;\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"lg\">\n        <Typography variant=\"h4\" component=\"h1\" gutterBottom\n          sx={{\n            fontWeight: 'bold',\n            textAlign: 'center',\n            marginBottom: '1rem',\n            fontSize: { xs: '1.5rem', sm: '2.125rem' }, // Adjusts the font size based on the screen width\n          }}\n        >\n          Kommunity Events\n        </Typography>\n        <Grid container spacing={2} justifyContent=\"center\">\n          {this.state.data.map((event, index) => (\n            <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\n              <EventCard event={event} />\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nconst EventCard = ({ event }) => {\n  const isCancelled = event['Отменено?']?.toLowerCase() === 'да';\n  const reason = event['Причина отмены'] || 'ГАЛЯ, У НАС ОТМЕНА';\n\n  return (\n    <Card sx={{\n      mb: 2,\n      backgroundColor: event.eventTypeColor,\n      boxShadow: 3,\n      '&:hover': {\n        boxShadow: 6,\n      },\n      ...(isCancelled && {\n        bgcolor: 'error.light',\n        color: 'error.contrastText',\n      }),\n    }}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"div\" sx={{ fontWeight: 'bold', textTransform: 'capitalize' }}>\n          {event.Тип || 'Не указан'}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {`${event['Дата']}, ${event.dayOfWeek}, ${event.displayTime}`}\n        </Typography>\n        <Typography variant=\"body2\" sx={{ mt: 1 }}>\n          {event.Описание || 'Нет описания'}\n        </Typography>\n        <Typography variant=\"body2\" sx={{ mt: 1 }}>\n          Адрес: {event['Ссылка на карту'] ? <Link href={event['Ссылка на карту']} target=\"_blank\">{event['Адрес по-человечески']}</Link> : 'Не указан'}\n        </Typography>\n        {isCancelled && (\n          <Typography color=\"error\" sx={{ mt: 1 }}>\n            Отменено: {reason}\n          </Typography>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport App from './App';\n\nconst theme = createTheme({\n  // здесь можете настроить тему, если нужно\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>\n);\n"],"sourceRoot":""}