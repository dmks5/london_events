{"version":3,"sources":["App.js","index.js"],"names":["daysOfWeek","eventColors","Мафия","Квиз","Нетворкинг","Настолки","EventCard","_ref","_event$Отменено","event","isCancelled","toLowerCase","reason","React","createElement","Card","sx","mb","backgroundColor","eventTypeColor","boxShadow","bgcolor","color","CardContent","Typography","gutterBottom","variant","component","fontWeight","textTransform","Тип","concat","dayOfWeek","displayTime","mt","Описание","Link","href","target","App","Component","constructor","super","this","state","data","componentDidMount","readRemoteFile","complete","results","jsonData","convertArrayToJSON","sortedFilteredData","sortAndFilterEvents","setState","array","headers","slice","map","row","obj","forEach","header","index","events","currentDate","Date","setHours","dateParts","split","reverse","timeParts","date","join","isNaN","dateObject","getDay","getEventTypeColor","filter","sort","a","b","eventType","Object","keys","key","includes","render","Container","maxWidth","Grid","container","spacing","justifyContent","item","xs","sm","md","lg","theme","createTheme","ReactDOM","createRoot","document","getElementById","ThemeProvider"],"mappings":"8QAKA,MAAMA,EAAa,CAAC,qEAAe,qEAAe,6CAAW,iCAAS,6CAAW,6CAAW,8CACtFC,EAAc,CAClBC,iCAAS,UACTC,2BAAQ,UACRC,+DAAc,UACdC,mDAAY,WAmFd,MAAMC,EAAYC,IAAe,IAAAC,EAAA,IAAdC,MAAEA,GAAOF,EAC1B,MAAMG,EAAoD,kBAApB,QAAlBF,EAAAC,EAAM,4DAAY,IAAAD,OAAA,EAAlBA,EAAoBG,eAClCC,EAASH,EAAM,oFAAqB,2FAE1C,OACEI,IAAAC,cAACC,IAAI,CAACC,GAAI,CACRC,GAAI,EACJC,gBAAiBT,EAAMU,eACvBC,UAAW,KACPV,GAAe,CACjBW,QAAS,cACTC,MAAO,wBAGTT,IAAAC,cAACS,IAAW,KACVV,IAAAC,cAACU,IAAU,CAACC,cAAY,EAACC,QAAQ,KAAKC,UAAU,MAAMX,GAAI,CAAEY,WAAY,OAAQC,cAAe,eAC5FpB,EAAMqB,oBAAO,qDAEhBjB,IAAAC,cAACU,IAAU,CAACE,QAAQ,QAAQJ,MAAM,kBAAgB,GAAAS,OAC5CtB,EAAM,4BAAO,MAAAsB,OAAKtB,EAAMuB,UAAS,MAAAD,OAAKtB,EAAMwB,cAElDpB,IAAAC,cAACU,IAAU,CAACE,QAAQ,QAAQV,GAAI,CAAEkB,GAAI,IACnCzB,EAAM0B,kDAAY,uEAErBtB,IAAAC,cAACU,IAAU,CAACE,QAAQ,QAAQV,GAAI,CAAEkB,GAAI,IAAK,mCACjCzB,EAAM,oFAAqBI,IAAAC,cAACsB,IAAI,CAACC,KAAM5B,EAAM,oFAAoB6B,OAAO,UAAU7B,EAAM,mHAAkC,qDAEnIC,GACCG,IAAAC,cAACU,IAAU,CAACF,MAAM,QAAQN,GAAI,CAAEkB,GAAI,IAAK,qDAC5BtB,MAQR2B,MArHf,cAAkBC,YAChBC,cACEC,QACAC,KAAKC,MAAQ,CACXC,KAAM,IAIVC,oBACEC,YAAe,mKAAoK,CACjLC,SAAWC,IACT,MAAMC,EAAWP,KAAKQ,mBAAmBF,EAAQJ,MAC3CO,EAAqBT,KAAKU,oBAAoBH,GACpDP,KAAKW,SAAS,CAAET,KAAMO,OAK5BD,mBAAmBI,GACjB,MAAMC,EAAUD,EAAM,GAEtB,OADaA,EAAME,MAAM,GACbC,IAAIC,IACd,IAAIC,EAAM,GAIV,OAHAJ,EAAQK,QAAQ,CAACC,EAAQC,KACvBH,EAAIE,GAAUH,EAAII,IAAU,KAEvBH,IAIXP,oBAAoBW,GAClB,MAAMC,EAAc,IAAIC,KAGxB,OAFAD,EAAYE,SAAS,EAAG,EAAG,EAAG,GAEvBH,EACJN,IAAIjD,IACH,IAAKA,EAAM,4BAAS,OAAO,KAE3B,MAAM2D,EAAY3D,EAAM,4BAAQ4D,MAAM,KAAKC,UACrCC,EAAY9D,EAAM,kCAAWA,EAAM,kCAAS4D,MAAM,KAAO,CAAC,KAAM,KAAM,MACtEG,EAAO,IAAIN,KAAKE,EAAUK,KAAK,KAAO,IAAMF,EAAUE,KAAK,MACjE,OAAIC,MAAMF,GAAc,KAEjB,IACF/D,EACHkE,WAAYH,EACZxC,UAAWhC,EAAWwE,EAAKI,UAC3B3C,YAAasC,EAAUd,MAAM,EAAG,GAAGgB,KAAK,KACxCtD,eAAgBwB,KAAKkC,kBAAkBpE,EAAM,0BAGhDqE,OAAOrE,GAAmB,OAAVA,GAAkBA,EAAMkE,YAAcV,GACtDc,KAAK,CAACC,EAAGC,IAAMD,EAAEL,WAAaM,EAAEN,YAGrCE,kBAAkBK,GAChB,IAAI5D,EAAQ,YAMZ,OALA6D,OAAOC,KAAKnF,GAAa4D,QAAQwB,IAC3BH,GAAaA,EAAUvE,cAAc2E,SAASD,EAAI1E,iBACpDW,EAAQrB,EAAYoF,MAGjB/D,EAGTiE,SACE,OACE1E,IAAAC,cAAC0E,IAAS,CAACC,SAAS,MAClB5E,IAAAC,cAAC4E,IAAI,CAACC,WAAS,EAACC,QAAS,EAAGC,eAAe,UACxClD,KAAKC,MAAMC,KAAKa,IAAI,CAACjD,EAAOsD,IAC3BtD,GAASI,IAAAC,cAAC4E,IAAI,CAACI,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGb,IAAKtB,GACpDlD,IAAAC,cAACR,EAAS,CAACG,MAAOA,UC/EhC,MAAM0F,EAAQC,YAAY,IAIbC,IAASC,WAAWC,SAASC,eAAe,SACpDjB,OACH1E,IAAAC,cAAC2F,IAAa,CAACN,MAAOA,GACpBtF,IAAAC,cAACyB,EAAG","file":"static/js/main.afac93bf.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { readRemoteFile } from 'react-papaparse';\nimport { Card, CardContent, Typography, Link, Grid, Box, Container } from '@mui/material';\n\nconst daysOfWeek = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\nconst eventColors = {\n  'Мафия': '#FADADD', // light pink\n  'Квиз': '#ADD8E6', // light blue\n  'Нетворкинг': '#90EE90', // light green\n  'Настолки': '#FAFAD2', // light goldenrod yellow\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    readRemoteFile('https://docs.google.com/spreadsheets/d/e/2PACX-1vTPva1TqjJb1q71rdIyiL8kCTg1ErWP8OWYJQqDLWZhNPP43EechxS7r7mOzKL43En-FHBx0Ql0J0Lp/pub?gid=0&single=true&output=csv', {\n      complete: (results) => {\n        const jsonData = this.convertArrayToJSON(results.data);\n        const sortedFilteredData = this.sortAndFilterEvents(jsonData);\n        this.setState({ data: sortedFilteredData });\n      },\n    });\n  }\n\n  convertArrayToJSON(array) {\n    const headers = array[0];\n    const data = array.slice(1);\n    return data.map(row => {\n      let obj = {};\n      headers.forEach((header, index) => {\n        obj[header] = row[index] || '';\n      });\n      return obj;\n    });\n  }\n\n  sortAndFilterEvents(events) {\n    const currentDate = new Date();\n    currentDate.setHours(0, 0, 0, 0);\n\n    return events\n      .map(event => {\n        if (!event['Дата']) return null; // Если нет даты, событие не показываем\n\n        const dateParts = event['Дата'].split('/').reverse();\n        const timeParts = event['Время'] ? event['Время'].split(':') : ['00', '00', '00'];\n        const date = new Date(dateParts.join('-') + 'T' + timeParts.join(':'));\n        if (isNaN(date)) return null; // Если дата не валидная, событие не показываем\n\n        return {\n          ...event,\n          dateObject: date,\n          dayOfWeek: daysOfWeek[date.getDay()],\n          displayTime: timeParts.slice(0, 2).join(':'),\n          eventTypeColor: this.getEventTypeColor(event['Тип']),\n        };\n      })\n      .filter(event => event !== null && event.dateObject >= currentDate) // Исключаем отсутствующие и прошедшие события\n      .sort((a, b) => a.dateObject - b.dateObject);\n  }\n\n  getEventTypeColor(eventType) {\n    let color = 'lightgrey'; // default color\n    Object.keys(eventColors).forEach(key => {\n      if (eventType && eventType.toLowerCase().includes(key.toLowerCase())) {\n        color = eventColors[key];\n      }\n    });\n    return color;\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"lg\">\n        <Grid container spacing={2} justifyContent=\"center\">\n          {this.state.data.map((event, index) => (\n            event && <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\n              <EventCard event={event} />\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nconst EventCard = ({ event }) => {\n  const isCancelled = event['Отменено?']?.toLowerCase() === 'да';\n  const reason = event['Причина отмены'] || 'ГАЛЯ, У НАС ОТМЕНА';\n\n  return (\n    <Card sx={{\n      mb: 2,\n      backgroundColor: event.eventTypeColor,\n      boxShadow: 3, // adds a nice shadow\n      ...(isCancelled && {\n        bgcolor: 'error.light',\n        color: 'error.contrastText',\n      }),\n    }}>\n      <CardContent>\n        <Typography gutterBottom variant=\"h5\" component=\"div\" sx={{ fontWeight: 'bold', textTransform: 'capitalize' }}>\n          {event.Тип || 'Не указан'}\n        </Typography>\n        <Typography variant=\"body2\" color=\"text.secondary\">\n          {`${event['Дата']}, ${event.dayOfWeek}, ${event.displayTime}`}\n        </Typography>\n        <Typography variant=\"body2\" sx={{ mt: 1 }}>\n          {event.Описание || 'Нет описания'}\n        </Typography>\n        <Typography variant=\"body2\" sx={{ mt: 1 }}>\n          Адрес: {event['Ссылка на карту'] ? <Link href={event['Ссылка на карту']} target=\"_blank\">{event['Адрес по-человечески']}</Link> : 'Не указан'}\n        </Typography>\n        {isCancelled && (\n          <Typography color=\"error\" sx={{ mt: 1 }}>\n            Отменено: {reason}\n          </Typography>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport App from './App';\n\nconst theme = createTheme({\n  // здесь можете настроить тему, если нужно\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>\n);\n"],"sourceRoot":""}