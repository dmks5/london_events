{"version":3,"sources":["App.js","index.js"],"names":["daysOfWeek","eventColors","Мафия","Квиз","Нетворкинг","Настолки","EventCard","_ref","_event$Отменено","event","isCancelled","toLowerCase","reason","React","createElement","Card","sx","mb","backgroundColor","eventTypeColor","boxShadow","bgcolor","color","Box","display","justifyContent","alignItems","p","flexDirection","Typography","fontWeight","textTransform","Тип","variant","component","concat","dayOfWeek","displayTime","CardContent","Описание","Link","href","target","App","Component","constructor","super","this","state","data","componentDidMount","readRemoteFile","complete","results","jsonData","convertArrayToJSON","sortedFilteredData","sortAndFilterEvents","setState","array","headers","slice","map","row","obj","forEach","header","index","events","currentDate","Date","setHours","dateParts","split","reverse","timeParts","date","dateObject","getDay","length","getEventTypeColor","filter","sort","a","b","eventType","Object","keys","key","startsWith","render","Container","maxWidth","Grid","container","spacing","item","xs","sm","md","lg","theme","createTheme","ReactDOM","createRoot","document","getElementById","ThemeProvider"],"mappings":"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","file":"static/js/main.c41814ed.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { readRemoteFile } from 'react-papaparse';\nimport { Card, CardContent, Typography, Link, Grid, Box, Container } from '@mui/material';\n\nconst daysOfWeek = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\nconst eventColors = {\n  'Мафия': 'lightpink',\n  'Квиз': 'lightblue',\n  'Нетворкинг': 'lightgreen',\n  'Настолки': 'lightgoldenrodyellow',\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    readRemoteFile('your-data-source.csv', {\n      complete: (results) => {\n        const jsonData = this.convertArrayToJSON(results.data);\n        const sortedFilteredData = this.sortAndFilterEvents(jsonData);\n        this.setState({ data: sortedFilteredData });\n      },\n    });\n  }\n\n  convertArrayToJSON(array) {\n    const headers = array[0];\n    const data = array.slice(1);\n    return data.map(row => {\n      let obj = {};\n      headers.forEach((header, index) => {\n        obj[header] = row[index] || '';\n      });\n      return obj;\n    });\n  }\n\n  sortAndFilterEvents(events) {\n    const currentDate = new Date();\n    currentDate.setHours(0, 0, 0, 0);\n\n    return events\n      .map(event => {\n        const dateParts = event['Дата'].split('/').reverse();\n        const timeParts = event['Время'].split(':');\n        const date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2]);\n        date.setHours(timeParts[0], timeParts[1], timeParts[2] || 0);\n\n        return {\n          ...event,\n          dateObject: date,\n          dayOfWeek: daysOfWeek[date.getDay()],\n          displayTime: timeParts.length > 1 ? `${timeParts[0]}:${timeParts[1]}` : event['Время'],\n          eventTypeColor: this.getEventTypeColor(event['Тип']),\n        };\n      })\n      .filter(event => event.dateObject >= currentDate)\n      .sort((a, b) => a.dateObject - b.dateObject);\n  }\n\n  getEventTypeColor(eventType) {\n    let color = 'lightgrey'; // default color\n    Object.keys(eventColors).forEach(key => {\n      if (eventType.toLowerCase().startsWith(key.toLowerCase())) {\n        color = eventColors[key];\n      }\n    });\n    return color;\n  }\n\n  render() {\n    return (\n      <Container maxWidth=\"lg\">\n        <Grid container spacing={2} justifyContent=\"center\">\n          {this.state.data.map((event, index) => (\n            <Grid item xs={12} sm={6} md={4} lg={3} key={index}>\n              <EventCard event={event} />\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    );\n  }\n}\n\nconst EventCard = ({ event }) => {\n  const isCancelled = event['Отменено?']?.toLowerCase() === 'да';\n  const reason = event['Причина отмены'] || 'ХАЛЯ, У НАС ОТМЕНА';\n\n  return (\n    <Card sx={{\n      mb: 2,\n      backgroundColor: event.eventTypeColor,\n      boxShadow: 3, // adds a nice shadow\n      ...(isCancelled && {\n        bgcolor: 'error.light',\n        color: 'error.contrastText',\n      }),\n    }}>\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', p: 2 }}>\n        <Box sx={{ display: 'flex', flexDirection: 'column' }}>\n          <Typography sx={{ fontWeight: 'bold', textTransform: 'capitalize' }}>\n            {event.Тип || 'Не указан'}\n          </Typography>\n          <Typography variant=\"body2\" component=\"p\">\n            {`${event['Дата']}, ${event.dayOfWeek}, ${event.displayTime}`}\n          </Typography>\n        </Box>\n      </Box>\n      <CardContent>\n        <Typography color=\"textSecondary\">\n          {event.Описание || 'Нет описания'}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          Адрес: {event['Ссылка на карту'] ? <Link href={event['Ссылка на карту']} target=\"_blank\">{event['Адрес по-человечески']}</Link> : 'Адрес не указан'}\n        </Typography>\n        {isCancelled && (\n          <Typography color=\"error\" variant=\"body2\">\n            Отменено: {reason}\n          </Typography>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport App from './App';\n\nconst theme = createTheme({\n  // здесь можете настроить тему, если нужно\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>\n);\n"],"sourceRoot":""}